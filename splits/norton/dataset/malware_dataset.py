import os
import pandas as pd
import logging

from io import StringIO
from tqdm import tqdm
from multiprocessing import Pool
from splits.norton.dataset.config.config import config
from splits.norton.dataset.best_split import compute_best_time_split

sha256_key, first_sub_date_key = "sha256", "first_submission_date"


class MalwareDatasetBuilder:
    def __init__(self):
        self.__base_dir = os.path.dirname(os.path.abspath(__file__))

    def process_vt_report(self, vt_report: str):
        with open(vt_report, "r") as report:
            df_report = pd.read_json(StringIO(report.read()))["attributes"]
            sha256, first_sub_date = (
                df_report[sha256_key],
                df_report[first_sub_date_key],
            )
        return (sha256, first_sub_date)

    def __build_sha_fsd_df(self, malware_dir_path: str) -> pd.DataFrame:
        """
        Open VT reports and get SHA256 and first_submission_date values for each json.
        """
        logging.info(
            f"Building SHA256 and first submission date DataFrame from {malware_dir_path}"
        )
        families = os.listdir(malware_dir_path)
        vt_reports = []
        for family in tqdm(families):
            vt_reports_names = os.listdir(os.path.join(malware_dir_path, family))
            vt_reports.extend(
                [
                    os.path.join(malware_dir_path, family, vt_report)
                    for vt_report in vt_reports_names
                ]
            )
        with Pool() as pool:
            malwares_first_sub_date = pool.map(self.process_vt_report, vt_reports)
        return pd.DataFrame(
            malwares_first_sub_date, columns=[sha256_key, first_sub_date_key]
        )

    def __build_sha_family_df(self, malware_dir_path: str) -> pd.DataFrame:
        """
        Build dataset with malware's id (SHA256) and family
        """
        logging.info(f"Building SHA256 and family DataFrame from {malware_dir_path}")
        families = os.listdir(malware_dir_path)
        datasets = []
        for family in tqdm(families):
            current_samples = os.listdir(os.path.join(malware_dir_path, family))
            family_dataset = pd.DataFrame({"sha256": current_samples, "family": family})
            datasets.append(family_dataset)
        df = pd.concat(datasets, ignore_index=True)
        return df

    def malware_family_fsd_df(
        self,
        vt_reports_path: str = None,
        malware_dir_path: str = None,
    ) -> pd.DataFrame:
        vt_reports_path = (
            config.vt_reports_path if vt_reports_path is None else vt_reports_path
        )
        malware_dir_path = (
            config.malware_directory_path
            if malware_dir_path is None
            else malware_dir_path
        )
        df = pd.merge(
            left=self.__build_sha_family_df(malware_dir_path),
            right=self.__build_sha_fsd_df(vt_reports_path),
            on="sha256",
        )

        df["first_submission_date"] = df["first_submission_date"].apply(
            lambda t: pd.to_datetime(t, unit="s")
        )
        df.to_csv("./splits/merge_final.csv")
        return df


class MalwareDataset:
    def __init__(self):
        fsd = "first_submission_date"
        self.df_malware_family_fsd = MalwareDatasetBuilder().malware_family_fsd_df()

        split: pd.Timestamp = compute_best_time_split(self.df_malware_family_fsd)

        training_dataset = self.df_malware_family_fsd[
            self.df_malware_family_fsd[fsd] < split
        ]
        # Filter families with less than three samples
        counts = training_dataset.groupby("family").size().reset_index(name="size")
        counts = counts[counts["size"] > 3]
        self.training_dataset = training_dataset[
            training_dataset["family"].isin(counts["family"])
        ]
        self.testing_dataset = self.df_malware_family_fsd[
            ~self.df_malware_family_fsd["sha256"].isin(self.training_dataset["sha256"])
        ]
